/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TradeOrder } from "./TradeOrder";
import { TradeOrderCountArgs } from "./TradeOrderCountArgs";
import { TradeOrderFindManyArgs } from "./TradeOrderFindManyArgs";
import { TradeOrderFindUniqueArgs } from "./TradeOrderFindUniqueArgs";
import { CreateTradeOrderArgs } from "./CreateTradeOrderArgs";
import { UpdateTradeOrderArgs } from "./UpdateTradeOrderArgs";
import { DeleteTradeOrderArgs } from "./DeleteTradeOrderArgs";
import { Token } from "../../token/base/Token";
import { Wallet } from "../../wallet/base/Wallet";
import { TradeOrderService } from "../tradeOrder.service";
@graphql.Resolver(() => TradeOrder)
export class TradeOrderResolverBase {
  constructor(protected readonly service: TradeOrderService) {}

  async _tradeOrdersMeta(
    @graphql.Args() args: TradeOrderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TradeOrder])
  async tradeOrders(
    @graphql.Args() args: TradeOrderFindManyArgs
  ): Promise<TradeOrder[]> {
    return this.service.tradeOrders(args);
  }

  @graphql.Query(() => TradeOrder, { nullable: true })
  async tradeOrder(
    @graphql.Args() args: TradeOrderFindUniqueArgs
  ): Promise<TradeOrder | null> {
    const result = await this.service.tradeOrder(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TradeOrder)
  async createTradeOrder(
    @graphql.Args() args: CreateTradeOrderArgs
  ): Promise<TradeOrder> {
    return await this.service.createTradeOrder({
      ...args,
      data: {
        ...args.data,

        token: args.data.token
          ? {
              connect: args.data.token,
            }
          : undefined,

        wallet: args.data.wallet
          ? {
              connect: args.data.wallet,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TradeOrder)
  async updateTradeOrder(
    @graphql.Args() args: UpdateTradeOrderArgs
  ): Promise<TradeOrder | null> {
    try {
      return await this.service.updateTradeOrder({
        ...args,
        data: {
          ...args.data,

          token: args.data.token
            ? {
                connect: args.data.token,
              }
            : undefined,

          wallet: args.data.wallet
            ? {
                connect: args.data.wallet,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TradeOrder)
  async deleteTradeOrder(
    @graphql.Args() args: DeleteTradeOrderArgs
  ): Promise<TradeOrder | null> {
    try {
      return await this.service.deleteTradeOrder(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Token, {
    nullable: true,
    name: "token",
  })
  async getToken(@graphql.Parent() parent: TradeOrder): Promise<Token | null> {
    const result = await this.service.getToken(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Wallet, {
    nullable: true,
    name: "wallet",
  })
  async getWallet(
    @graphql.Parent() parent: TradeOrder
  ): Promise<Wallet | null> {
    const result = await this.service.getWallet(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
