/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TradeSettings } from "./TradeSettings";
import { TradeSettingsCountArgs } from "./TradeSettingsCountArgs";
import { TradeSettingsFindManyArgs } from "./TradeSettingsFindManyArgs";
import { TradeSettingsFindUniqueArgs } from "./TradeSettingsFindUniqueArgs";
import { CreateTradeSettingsArgs } from "./CreateTradeSettingsArgs";
import { UpdateTradeSettingsArgs } from "./UpdateTradeSettingsArgs";
import { DeleteTradeSettingsArgs } from "./DeleteTradeSettingsArgs";
import { User } from "../../user/base/User";
import { TradeSettingsService } from "../tradeSettings.service";
@graphql.Resolver(() => TradeSettings)
export class TradeSettingsResolverBase {
  constructor(protected readonly service: TradeSettingsService) {}

  async _tradeSettingsItemsMeta(
    @graphql.Args() args: TradeSettingsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TradeSettings])
  async tradeSettingsItems(
    @graphql.Args() args: TradeSettingsFindManyArgs
  ): Promise<TradeSettings[]> {
    return this.service.tradeSettingsItems(args);
  }

  @graphql.Query(() => TradeSettings, { nullable: true })
  async tradeSettings(
    @graphql.Args() args: TradeSettingsFindUniqueArgs
  ): Promise<TradeSettings | null> {
    const result = await this.service.tradeSettings(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TradeSettings)
  async createTradeSettings(
    @graphql.Args() args: CreateTradeSettingsArgs
  ): Promise<TradeSettings> {
    return await this.service.createTradeSettings({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TradeSettings)
  async updateTradeSettings(
    @graphql.Args() args: UpdateTradeSettingsArgs
  ): Promise<TradeSettings | null> {
    try {
      return await this.service.updateTradeSettings({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TradeSettings)
  async deleteTradeSettings(
    @graphql.Args() args: DeleteTradeSettingsArgs
  ): Promise<TradeSettings | null> {
    try {
      return await this.service.deleteTradeSettings(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: TradeSettings): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
