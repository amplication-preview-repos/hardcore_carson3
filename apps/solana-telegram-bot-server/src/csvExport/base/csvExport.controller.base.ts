/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CsvExportService } from "../csvExport.service";
import { CsvExportCreateInput } from "./CsvExportCreateInput";
import { CsvExport } from "./CsvExport";
import { CsvExportFindManyArgs } from "./CsvExportFindManyArgs";
import { CsvExportWhereUniqueInput } from "./CsvExportWhereUniqueInput";
import { CsvExportUpdateInput } from "./CsvExportUpdateInput";

export class CsvExportControllerBase {
  constructor(protected readonly service: CsvExportService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CsvExport })
  async createCsvExport(
    @common.Body() data: CsvExportCreateInput
  ): Promise<CsvExport> {
    return await this.service.createCsvExport({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,

        wallet: data.wallet
          ? {
              connect: data.wallet,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        generatedAt: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        wallet: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CsvExport] })
  @ApiNestedQuery(CsvExportFindManyArgs)
  async csvExports(@common.Req() request: Request): Promise<CsvExport[]> {
    const args = plainToClass(CsvExportFindManyArgs, request.query);
    return this.service.csvExports({
      ...args,
      select: {
        createdAt: true,
        generatedAt: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        wallet: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CsvExport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async csvExport(
    @common.Param() params: CsvExportWhereUniqueInput
  ): Promise<CsvExport | null> {
    const result = await this.service.csvExport({
      where: params,
      select: {
        createdAt: true,
        generatedAt: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        wallet: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CsvExport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCsvExport(
    @common.Param() params: CsvExportWhereUniqueInput,
    @common.Body() data: CsvExportUpdateInput
  ): Promise<CsvExport | null> {
    try {
      return await this.service.updateCsvExport({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,

          wallet: data.wallet
            ? {
                connect: data.wallet,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          generatedAt: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },

          wallet: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CsvExport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCsvExport(
    @common.Param() params: CsvExportWhereUniqueInput
  ): Promise<CsvExport | null> {
    try {
      return await this.service.deleteCsvExport({
        where: params,
        select: {
          createdAt: true,
          generatedAt: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },

          wallet: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
