/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TradeOrder as PrismaTradeOrder,
  Token as PrismaToken,
  Wallet as PrismaWallet,
} from "@prisma/client";

export class TradeOrderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TradeOrderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.tradeOrder.count(args);
  }

  async tradeOrders(
    args: Prisma.TradeOrderFindManyArgs
  ): Promise<PrismaTradeOrder[]> {
    return this.prisma.tradeOrder.findMany(args);
  }
  async tradeOrder(
    args: Prisma.TradeOrderFindUniqueArgs
  ): Promise<PrismaTradeOrder | null> {
    return this.prisma.tradeOrder.findUnique(args);
  }
  async createTradeOrder(
    args: Prisma.TradeOrderCreateArgs
  ): Promise<PrismaTradeOrder> {
    return this.prisma.tradeOrder.create(args);
  }
  async updateTradeOrder(
    args: Prisma.TradeOrderUpdateArgs
  ): Promise<PrismaTradeOrder> {
    return this.prisma.tradeOrder.update(args);
  }
  async deleteTradeOrder(
    args: Prisma.TradeOrderDeleteArgs
  ): Promise<PrismaTradeOrder> {
    return this.prisma.tradeOrder.delete(args);
  }

  async getToken(parentId: string): Promise<PrismaToken | null> {
    return this.prisma.tradeOrder
      .findUnique({
        where: { id: parentId },
      })
      .token();
  }

  async getWallet(parentId: string): Promise<PrismaWallet | null> {
    return this.prisma.tradeOrder
      .findUnique({
        where: { id: parentId },
      })
      .wallet();
  }
}
