/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CsvExport as PrismaCsvExport,
  User as PrismaUser,
  Wallet as PrismaWallet,
} from "@prisma/client";

export class CsvExportServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CsvExportCountArgs, "select">
  ): Promise<number> {
    return this.prisma.csvExport.count(args);
  }

  async csvExports(
    args: Prisma.CsvExportFindManyArgs
  ): Promise<PrismaCsvExport[]> {
    return this.prisma.csvExport.findMany(args);
  }
  async csvExport(
    args: Prisma.CsvExportFindUniqueArgs
  ): Promise<PrismaCsvExport | null> {
    return this.prisma.csvExport.findUnique(args);
  }
  async createCsvExport(
    args: Prisma.CsvExportCreateArgs
  ): Promise<PrismaCsvExport> {
    return this.prisma.csvExport.create(args);
  }
  async updateCsvExport(
    args: Prisma.CsvExportUpdateArgs
  ): Promise<PrismaCsvExport> {
    return this.prisma.csvExport.update(args);
  }
  async deleteCsvExport(
    args: Prisma.CsvExportDeleteArgs
  ): Promise<PrismaCsvExport> {
    return this.prisma.csvExport.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.csvExport
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getWallet(parentId: string): Promise<PrismaWallet | null> {
    return this.prisma.csvExport
      .findUnique({
        where: { id: parentId },
      })
      .wallet();
  }
}
