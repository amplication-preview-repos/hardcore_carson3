/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserService } from "../user.service";
import { UserCreateInput } from "./UserCreateInput";
import { User } from "./User";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserUpdateInput } from "./UserUpdateInput";
import { CsvExportFindManyArgs } from "../../csvExport/base/CsvExportFindManyArgs";
import { CsvExport } from "../../csvExport/base/CsvExport";
import { CsvExportWhereUniqueInput } from "../../csvExport/base/CsvExportWhereUniqueInput";
import { ReportFindManyArgs } from "../../report/base/ReportFindManyArgs";
import { Report } from "../../report/base/Report";
import { ReportWhereUniqueInput } from "../../report/base/ReportWhereUniqueInput";
import { TradeSettingsFindManyArgs } from "../../tradeSettings/base/TradeSettingsFindManyArgs";
import { TradeSettings } from "../../tradeSettings/base/TradeSettings";
import { TradeSettingsWhereUniqueInput } from "../../tradeSettings/base/TradeSettingsWhereUniqueInput";
import { WalletFindManyArgs } from "../../wallet/base/WalletFindManyArgs";
import { Wallet } from "../../wallet/base/Wallet";
import { WalletWhereUniqueInput } from "../../wallet/base/WalletWhereUniqueInput";

export class UserControllerBase {
  constructor(protected readonly service: UserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  async createUser(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.createUser({
      data: data,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        telegramId: true,
        updatedAt: true,
        username: true,
        walletBalance: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  async users(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.users({
      ...args,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        telegramId: true,
        updatedAt: true,
        username: true,
        walletBalance: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async user(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.user({
      where: params,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        telegramId: true,
        updatedAt: true,
        username: true,
        walletBalance: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.updateUser({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          lastName: true,
          roles: true,
          telegramId: true,
          updatedAt: true,
          username: true,
          walletBalance: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUser(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.deleteUser({
        where: params,
        select: {
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          lastName: true,
          roles: true,
          telegramId: true,
          updatedAt: true,
          username: true,
          walletBalance: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/csvExports")
  @ApiNestedQuery(CsvExportFindManyArgs)
  async findCsvExports(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<CsvExport[]> {
    const query = plainToClass(CsvExportFindManyArgs, request.query);
    const results = await this.service.findCsvExports(params.id, {
      ...query,
      select: {
        createdAt: true,
        generatedAt: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        wallet: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/csvExports")
  async connectCsvExports(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: CsvExportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      csvExports: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/csvExports")
  async updateCsvExports(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: CsvExportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      csvExports: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/csvExports")
  async disconnectCsvExports(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: CsvExportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      csvExports: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/reports")
  @ApiNestedQuery(ReportFindManyArgs)
  async findReports(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Report[]> {
    const query = plainToClass(ReportFindManyArgs, request.query);
    const results = await this.service.findReports(params.id, {
      ...query,
      select: {
        createdAt: true,
        endDate: true,
        id: true,
        startDate: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/reports")
  async connectReports(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reports: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/reports")
  async updateReports(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reports: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/reports")
  async disconnectReports(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reports: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tradeSettingsItems")
  @ApiNestedQuery(TradeSettingsFindManyArgs)
  async findTradeSettingsItems(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<TradeSettings[]> {
    const query = plainToClass(TradeSettingsFindManyArgs, request.query);
    const results = await this.service.findTradeSettingsItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        jitoTip: true,
        priorityFee: true,
        slippage: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tradeSettingsItems")
  async connectTradeSettingsItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TradeSettingsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tradeSettingsItems: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tradeSettingsItems")
  async updateTradeSettingsItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TradeSettingsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tradeSettingsItems: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tradeSettingsItems")
  async disconnectTradeSettingsItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TradeSettingsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tradeSettingsItems: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/wallets")
  @ApiNestedQuery(WalletFindManyArgs)
  async findWallets(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Wallet[]> {
    const query = plainToClass(WalletFindManyArgs, request.query);
    const results = await this.service.findWallets(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        privateKey: true,
        publicKey: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/wallets")
  async connectWallets(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: WalletWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wallets: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/wallets")
  async updateWallets(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: WalletWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wallets: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/wallets")
  async disconnectWallets(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: WalletWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wallets: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }
}
