/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TradeSettingsService } from "../tradeSettings.service";
import { TradeSettingsCreateInput } from "./TradeSettingsCreateInput";
import { TradeSettings } from "./TradeSettings";
import { TradeSettingsFindManyArgs } from "./TradeSettingsFindManyArgs";
import { TradeSettingsWhereUniqueInput } from "./TradeSettingsWhereUniqueInput";
import { TradeSettingsUpdateInput } from "./TradeSettingsUpdateInput";

export class TradeSettingsControllerBase {
  constructor(protected readonly service: TradeSettingsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TradeSettings })
  async createTradeSettings(
    @common.Body() data: TradeSettingsCreateInput
  ): Promise<TradeSettings> {
    return await this.service.createTradeSettings({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        jitoTip: true,
        priorityFee: true,
        slippage: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TradeSettings] })
  @ApiNestedQuery(TradeSettingsFindManyArgs)
  async tradeSettingsItems(
    @common.Req() request: Request
  ): Promise<TradeSettings[]> {
    const args = plainToClass(TradeSettingsFindManyArgs, request.query);
    return this.service.tradeSettingsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        jitoTip: true,
        priorityFee: true,
        slippage: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TradeSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tradeSettings(
    @common.Param() params: TradeSettingsWhereUniqueInput
  ): Promise<TradeSettings | null> {
    const result = await this.service.tradeSettings({
      where: params,
      select: {
        createdAt: true,
        id: true,
        jitoTip: true,
        priorityFee: true,
        slippage: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TradeSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTradeSettings(
    @common.Param() params: TradeSettingsWhereUniqueInput,
    @common.Body() data: TradeSettingsUpdateInput
  ): Promise<TradeSettings | null> {
    try {
      return await this.service.updateTradeSettings({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          jitoTip: true,
          priorityFee: true,
          slippage: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TradeSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTradeSettings(
    @common.Param() params: TradeSettingsWhereUniqueInput
  ): Promise<TradeSettings | null> {
    try {
      return await this.service.deleteTradeSettings({
        where: params,
        select: {
          createdAt: true,
          id: true,
          jitoTip: true,
          priorityFee: true,
          slippage: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
