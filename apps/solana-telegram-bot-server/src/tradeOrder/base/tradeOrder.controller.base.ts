/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TradeOrderService } from "../tradeOrder.service";
import { TradeOrderCreateInput } from "./TradeOrderCreateInput";
import { TradeOrder } from "./TradeOrder";
import { TradeOrderFindManyArgs } from "./TradeOrderFindManyArgs";
import { TradeOrderWhereUniqueInput } from "./TradeOrderWhereUniqueInput";
import { TradeOrderUpdateInput } from "./TradeOrderUpdateInput";

export class TradeOrderControllerBase {
  constructor(protected readonly service: TradeOrderService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TradeOrder })
  async createTradeOrder(
    @common.Body() data: TradeOrderCreateInput
  ): Promise<TradeOrder> {
    return await this.service.createTradeOrder({
      data: {
        ...data,

        token: data.token
          ? {
              connect: data.token,
            }
          : undefined,

        wallet: data.wallet
          ? {
              connect: data.wallet,
            }
          : undefined,
      },
      select: {
        amount: true,
        createdAt: true,
        id: true,
        jitoFee: true,
        price: true,
        priorityFee: true,
        slippage: true,
        status: true,

        token: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,

        wallet: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TradeOrder] })
  @ApiNestedQuery(TradeOrderFindManyArgs)
  async tradeOrders(@common.Req() request: Request): Promise<TradeOrder[]> {
    const args = plainToClass(TradeOrderFindManyArgs, request.query);
    return this.service.tradeOrders({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        jitoFee: true,
        price: true,
        priorityFee: true,
        slippage: true,
        status: true,

        token: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,

        wallet: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TradeOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tradeOrder(
    @common.Param() params: TradeOrderWhereUniqueInput
  ): Promise<TradeOrder | null> {
    const result = await this.service.tradeOrder({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        jitoFee: true,
        price: true,
        priorityFee: true,
        slippage: true,
        status: true,

        token: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,

        wallet: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TradeOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTradeOrder(
    @common.Param() params: TradeOrderWhereUniqueInput,
    @common.Body() data: TradeOrderUpdateInput
  ): Promise<TradeOrder | null> {
    try {
      return await this.service.updateTradeOrder({
        where: params,
        data: {
          ...data,

          token: data.token
            ? {
                connect: data.token,
              }
            : undefined,

          wallet: data.wallet
            ? {
                connect: data.wallet,
              }
            : undefined,
        },
        select: {
          amount: true,
          createdAt: true,
          id: true,
          jitoFee: true,
          price: true,
          priorityFee: true,
          slippage: true,
          status: true,

          token: {
            select: {
              id: true,
            },
          },

          typeField: true,
          updatedAt: true,

          wallet: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TradeOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTradeOrder(
    @common.Param() params: TradeOrderWhereUniqueInput
  ): Promise<TradeOrder | null> {
    try {
      return await this.service.deleteTradeOrder({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          id: true,
          jitoFee: true,
          price: true,
          priorityFee: true,
          slippage: true,
          status: true,

          token: {
            select: {
              id: true,
            },
          },

          typeField: true,
          updatedAt: true,

          wallet: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
