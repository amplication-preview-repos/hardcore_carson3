/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TradeSettings as PrismaTradeSettings,
  User as PrismaUser,
} from "@prisma/client";

export class TradeSettingsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TradeSettingsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.tradeSettings.count(args);
  }

  async tradeSettingsItems(
    args: Prisma.TradeSettingsFindManyArgs
  ): Promise<PrismaTradeSettings[]> {
    return this.prisma.tradeSettings.findMany(args);
  }
  async tradeSettings(
    args: Prisma.TradeSettingsFindUniqueArgs
  ): Promise<PrismaTradeSettings | null> {
    return this.prisma.tradeSettings.findUnique(args);
  }
  async createTradeSettings(
    args: Prisma.TradeSettingsCreateArgs
  ): Promise<PrismaTradeSettings> {
    return this.prisma.tradeSettings.create(args);
  }
  async updateTradeSettings(
    args: Prisma.TradeSettingsUpdateArgs
  ): Promise<PrismaTradeSettings> {
    return this.prisma.tradeSettings.update(args);
  }
  async deleteTradeSettings(
    args: Prisma.TradeSettingsDeleteArgs
  ): Promise<PrismaTradeSettings> {
    return this.prisma.tradeSettings.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.tradeSettings
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
